{"version":3,"sources":["app/texture-editor/common/Mouse.js","app/config-builder/helpers/writeConfig.js","components/NavBar.js","components/ConfigGUI.js","app/texture-editor/editor.js","components/TextureEditor.js","App.js","reportWebVitals.js","index.js"],"names":["mouse","position","x","y","old","button","state","id","origin","displacement","getPosition","offset","inBounds","moving","clicked","module","exports","getFormattedGroup","prefix","key","value","length","join","getFormattedValue","_key","includes","str","i","getBlocks","blockList","NavBar","React","Component","render","className","Editor","app","currentColor","r","g","b","a","debug","type","loader","PIXI","shared","Sprite","Graphics","doBoundUpdate","updateBounds","canvasBounds","view","getBoundingClientRect","bounds","left","right","top","bottom","width","height","refresh","startup","onReady","ticker","add","draw","setup","console","log","isWebGLSupported","sayHello","load","pixels","showGrid","debugElem","document","getElementById","updateDebug","mousePos","innerHTML","JSON","stringify","Math","floor","decToHex","background","pixel","getPixel","update","stage","removeChild","graphic","setPixel","color","addChild","pos","scale","compose","canvas","createElement","context","getContext","imgData","createImageData","v","data","putImageData","url","toDataURL","link","href","setAttribute","click","this","beginFill","drawRect","endFill","c","hex","Number","toString","lineStyle","rgbToHex","alpha","mouseMove_timeout","TextureEditor","getCanvas","parent","editor","oncontextmenu","e","preventDefault","stopPropagation","appendChild","componentDidMount","addEventListener","event","clientX","clientY","clearTimeout","setTimeout","window","colorPicker","map","htmlFor","name","placeholder","onChange","updateColor","onKeyPress","match","defaultValue","onClick","clear","target","checked","bind","m","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d3e0162a.chunk.js","sourcesContent":["const mouse = {\r\n    position: {\r\n        x: 0,\r\n        y: 0,\r\n        old: { x: 0, y: 0 }\r\n    },\r\n    button: {\r\n        state: false,\r\n        id: 0,\r\n        origin: { x: null, y: null }\r\n    },\r\n    displacement: () => {\r\n        return {\r\n            x: mouse.position.old.x === null ? 0 : mouse.position.x - mouse.position.old.x,\r\n            y: mouse.position.old.y === null ? 0 : mouse.position.y - mouse.position.old.y\r\n        }\r\n    },\r\n    getPosition: (offset = null) => {\r\n        return offset === null\r\n        ?\r\n        {\r\n            x: mouse.position.x,\r\n            y: mouse.position.y\r\n        }\r\n        :\r\n        {\r\n                x: mouse.position.x - offset.x,\r\n                y: mouse.position.y - offset.y\r\n        }\r\n    },\r\n    inBounds: false,\r\n    moving: false,\r\n    clicked: false\r\n};\r\n\r\nmodule.exports = mouse;","function getObj() {\r\n    return {\r\n        Blocks: {\r\n            Suite: {\r\n                \"String Lists\": {\r\n                    wood_suite_list: [],\r\n                    stone_suite_list: []\r\n                }\r\n            },\r\n            Redstone: {\r\n                \"String Lists\": {\r\n                    fence_gate_list: [],\r\n                    door_list: [],\r\n                    trapdoor_list: []\r\n                }\r\n            },\r\n            Generic: {\r\n                \"String Lists\": {\r\n                    slab_list: [],\r\n                    wall_list: [],\r\n                    block_list: [],\r\n                    stairs_list: [],\r\n                    fence_list: []\r\n                }\r\n            },\r\n            Interactive: {\r\n                \"String Lists\": {\r\n                    barrel_list: [],\r\n                    shulker_list: []\r\n                }\r\n            }\r\n        },\r\n        UI: {\r\n            ItemGroups: {\r\n                \"String Lists\": {\r\n                    tabs: []\r\n                }\r\n            }\r\n        },\r\n        Items: {\r\n            Tool: {\r\n                \"String Lists\": {\r\n                    pickaxe_list: [],\r\n                    axe_list: [],\r\n                    hoe_list: [],\r\n                    shovel_list: []\r\n                }\r\n            }\r\n        },\r\n        Resources: {\r\n            Ores: {\r\n                \"String Lists\": {\r\n                    gem_list: [],\r\n                    metal_list: []\r\n                }\r\n            },\r\n            Plants: {\r\n                \"String Lists\": {\r\n                    crop_list: []\r\n                }\r\n            }\r\n        },\r\n        WorldGen: {\r\n            Biomes: {\r\n                \"String Lists\": {\r\n                    biome_list: []\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getFormattedValue(key, value) {\r\n    return `${key} = [${value.join(', ')}]\\n`;\r\n}\r\n\r\nfunction getFormattedGroup(prefix, key, value) {\r\n    if (value.length >= 0)\r\n        return getFormattedValue(key, value);\r\n    else {\r\n        let _key = `${prefix === null ? '' : `${prefix}.`}${key !== null ? key.includes(\" \") ? `\"${key}\"` : key : \"\"}`;\r\n\r\n        let str = key === null ? '' : `[${_key}]\\n`;\r\n\r\n        for (let i in value)\r\n            str += getFormattedGroup(key !== null ? _key : null, i, value[i]);\r\n\r\n        return str;\r\n    }\r\n}\r\n\r\nfunction getBlocks(blockList) {\r\n    return getFormattedGroup(null, null, blockList);\r\n}\r\n\r\nfunction write(blockList) {\r\n    const blob = new Blob([getBlocks(blockList)], {type: 'application/toml'});\r\n    const url = window.URL.createObjectURL(blob);\r\n    let link = document.getElementById('download_link');\r\n    link.href = url;\r\n    link.setAttribute('download', 'conloot.toml');\r\n    link.click();\r\n}\r\n\r\nexport {\r\n    write,\r\n    getObj\r\n}","import React from 'react';\r\n\r\nimport '../styles/nav-bar.css'\r\n\r\nclass NavBar extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <div className='nav-bar'>\r\n                {/* <div className='nav-bar-button'>Button 1</div>\r\n                <div className='nav-bar-button'>Button 2</div>\r\n                <div className='nav-bar-button'>Button 3</div>\r\n                <div className='nav-bar-button'>Button 4</div>\r\n                <div className='nav-bar-button'>Button 5</div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { NavBar }","import React from 'react';\r\n\r\nimport '../styles/forms.css';\r\nimport '../styles/config-gui.css';\r\n\r\nimport { write, getObj } from '../app/config-builder/helpers/writeConfig';\r\n\r\nclass ConfigForm extends React.Component {\r\n\r\n    fields = [];\r\n    checkboxes = ['all', 'block', 'slab', 'stairs', 'wall', 'fence'];\r\n\r\n    updateName(event) {\r\n        let arr = this.state.values;\r\n        let i = event.target.name.match(/(\\d+)/)[1];\r\n\r\n        if (!arr[i])\r\n            arr[i] = {};\r\n        arr[i].name = event.target.value\r\n\r\n        this.setState({ values: arr });\r\n    }\r\n\r\n    updateMaterial(event) {\r\n        let arr = this.state.values;\r\n        let i = event.target.name.match(/(\\d+)/)[1];\r\n\r\n        if (!arr[i])\r\n            arr[i] = {};\r\n        arr[i].material = event.target.value\r\n\r\n        this.setState({ values: arr });\r\n    }\r\n\r\n    addInput() {\r\n        this.fields.push({\r\n            key: this.fields.length,\r\n            value: \"\",\r\n            placeholder: `my_block_${this.fields.length}`\r\n        });\r\n\r\n        let arr = this.state.values;\r\n        arr.push({});\r\n        this.setState({ values: arr });\r\n    }\r\n\r\n    removeInput() {\r\n        this.fields.splice(-1, 1);\r\n\r\n        let arr = this.state.values;\r\n        arr.splice(-1, 1);\r\n        this.setState({ values: arr });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let submit = {};\r\n\r\n        let blockList = getObj();\r\n\r\n        this.state.values.forEach((item, i) => {\r\n            if (!submit[item.name]) {\r\n                submit[item.name] = item;\r\n                if (!!item.all) {\r\n                    if (item.material === 'wood')\r\n                        blockList.Blocks.Suite['String Lists'].wood_suite_list.push(`\"${item.name}\"`);\r\n                    else\r\n                        blockList.Blocks.Suite['String Lists'].stone_suite_list.push(`\"${item.name}\"`);\r\n                }\r\n                else {\r\n                    if (!!item.block)\r\n                        blockList.Blocks.Generic['String Lists'].block_list.push(`\"${item.name}\"`);\r\n                    if (!!item.slab)\r\n                        blockList.Blocks.Generic['String Lists'].slab_list.push(`\"${item.name}\"`);\r\n                    if (!!item.stairs)\r\n                        blockList.Blocks.Generic['String Lists'].stairs_list.push(`\"${item.name}\"`)\r\n                    if (!!item.wall)\r\n                        blockList.Blocks.Generic['String Lists'].wall_list.push(`\"${item.name}\"`);\r\n                    if (!!item.fence)\r\n                        blockList.Blocks.Generic['String Lists'].fence_list.push(`\"${item.name}\"`);\r\n                }\r\n            }\r\n        });\r\n\r\n        alert('A name was submitted: ' + JSON.stringify(submit));\r\n        event.preventDefault();\r\n\r\n        write(blockList);\r\n    }\r\n\r\n    checkRow(index) {\r\n        this.checkboxes.map((cb) => (document.getElementById(`${index}_cb_${cb}`).checked = true));\r\n    }\r\n\r\n    checkBox(event) {\r\n        let m = event.target.name.match(/(\\d+)_cb_(\\w+)/);\r\n        let index = m[1];\r\n        let box = m[2];\r\n\r\n        let arr = this.state.values;\r\n\r\n        if (!arr[index])\r\n            arr[index] = {};\r\n\r\n        if (box === 'all') {\r\n            if (event.target.checked) {\r\n                this.checkRow(index);\r\n                for (let i = 1; i < this.checkboxes.length; i++)\r\n                    arr[index][this.checkboxes[i]] = true;\r\n            }\r\n        }\r\n\r\n        arr[index][box] = event.target.checked;\r\n\r\n        this.setState({ values: arr });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='config-gui-container'>\r\n                <h1>Config Generator</h1>\r\n                <div className='form-container'>\r\n                    <a id='download_link' href='/file.txt' download style={{ display: 'none' }}>_</a>\r\n                    <form className='form-body' onSubmit={this.handleSubmit}>\r\n                        <ul className='form-input-list'>\r\n                            {\r\n                                this.fields.map((field) => (\r\n                                    <li className='form-input-list-item' key={field.key}>\r\n                                        <label htmlFor={field.key} >Block {field.key + 1}</label>\r\n                                        <input\r\n                                            className='form-input'\r\n                                            key={field.key}\r\n                                            name={`${field.key}_content`}\r\n                                            defaultValue={field.value}\r\n                                            placeholder={field.placeholder}\r\n                                            onChange={this.updateName}\r\n                                            required\r\n                                            onKeyPress={(event) => {\r\n                                                console.log(event.key)\r\n                                                if (event.key.match(/[a-zA-Z_0-9]/) === null)\r\n                                                    event.preventDefault();\r\n                                            }}\r\n                                        />\r\n\r\n                                        <input\r\n                                            className='form-input'\r\n                                            key={`${field.key}_material`}\r\n                                            name={`${field.key}_material`}\r\n                                            defaultValue=''\r\n                                            placeholder='stone | wood | etc...'\r\n                                            onChange={this.updateMaterial}\r\n                                        />\r\n\r\n                                        <div className='form-checkbox-container'>\r\n                                            {\r\n                                                this.checkboxes.map((box) => (\r\n                                                    <div key={`checkbox_group_${box}`}>\r\n                                                        <label htmlFor={`${field.key}_rb_${box}`} >{`${box}`}</label>\r\n                                                        <input\r\n                                                            className='form-input-checkbox'\r\n                                                            key={`${field.key}_cb_${box}`}\r\n                                                            id={`${field.key}_cb_${box}`}\r\n                                                            name={`${field.key}_cb_${box}`}\r\n                                                            type='checkbox'\r\n                                                            onChange={this.checkBox}\r\n                                                        />\r\n                                                    </div>\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                        <input className='form-input-submit' type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n\r\n                    <div className='form-button-container'>\r\n                        <div className='form-button' onClick={(event) => {\r\n                            this.addInput(event)\r\n                        }}>\r\n                            Add\r\n                        </div>\r\n                        <div className='form-button' onClick={(event) => {\r\n                            this.removeInput(event);\r\n                        }}>\r\n                            Remove\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { values: [] };\r\n\r\n        this.updateName = this.updateName.bind(this);\r\n        this.updateMaterial = this.updateMaterial.bind(this);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.checkBox = this.checkBox.bind(this);\r\n        this.checkRow = this.checkRow.bind(this);\r\n    }\r\n}\r\n\r\nexport { ConfigForm };","import * as PIXI from 'pixi.js';\r\nimport mouse from './common/Mouse';\r\n\r\nclass Editor {\r\n    app;\r\n\r\n    currentColor = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 255\r\n    };\r\n\r\n    width;\r\n    height;\r\n    scale;\r\n\r\n    debug = false;\r\n\r\n    type = \"WebGL\";\r\n\r\n    loader = PIXI.Loader.shared;\r\n    Sprite = PIXI.Sprite;\r\n    Graphics = PIXI.Graphics;\r\n\r\n    doBoundUpdate = true;\r\n    bounds;\r\n\r\n    updateBounds = () => {\r\n        let canvasBounds = this.app.view.getBoundingClientRect();\r\n\r\n        this.bounds = {\r\n            x: canvasBounds.x,\r\n            y: canvasBounds.y,\r\n            left: canvasBounds.left,\r\n            right: canvasBounds.right,\r\n            top: canvasBounds.top,\r\n            bottom: canvasBounds.bottom,\r\n            width: canvasBounds.width,\r\n            height: canvasBounds.height\r\n        };\r\n\r\n        this.doBoundUpdate = false;\r\n\r\n        this.refresh = true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {PIXI.Application} app \r\n     * @returns {HTMLCanvasElement}\r\n     */\r\n    startup = () => {\r\n        this.onReady(() => this.app.ticker.add(() => this.draw()));\r\n\r\n        return this.app.view;\r\n    }\r\n\r\n    onReady = (setup) => {\r\n        console.log('App ready. Loading.');\r\n\r\n        if (!PIXI.utils.isWebGLSupported()) {\r\n            this.type = \"canvas\";\r\n        }\r\n\r\n        PIXI.utils.sayHello(this.type);\r\n\r\n        this.loader\r\n            .load(setup);\r\n    }\r\n\r\n    pixels = [];\r\n\r\n    showGrid = false;\r\n    refresh = true;\r\n\r\n    debugElem = document.getElementById('debug');\r\n    updateDebug = () => {\r\n        if (this.debugElem === null)\r\n            this.debugElem = document.getElementById('debug');\r\n\r\n        if (!this.debug) {\r\n            this.debugElem.innerHTML = \"\";\r\n            return;\r\n        }\r\n\r\n        let mousePos = mouse.getPosition();\r\n\r\n        this.debugElem.innerHTML =\r\n            `Mouse: ${JSON.stringify(mousePos)} --> ${Math.floor(mousePos.x / 16)}, ${Math.floor(mousePos.y / 16)}<br />` +\r\n            `Color: ${JSON.stringify(this.currentColor)}<br />` +\r\n            `0x${this.decToHex(this.currentColor.r)}${this.decToHex(this.currentColor.g)}${this.decToHex(this.currentColor.b)}`;\r\n    }\r\n\r\n    background = [];\r\n\r\n    draw = () => {\r\n        this.updateDebug();\r\n\r\n        let pixel;\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                pixel = this.getPixel(x, y);\r\n\r\n                if (pixel.update || this.refresh) {\r\n                    this.app.stage.removeChild(pixel.graphic);\r\n\r\n                    if (this.refresh)\r\n                        this.setPixel(x, y, pixel.color);\r\n\r\n                    if (pixel.color.a < 255)\r\n                        this.app.stage.addChild(this.background[y * 16 + x]);\r\n                    else\r\n                        this.app.stage.removeChild(this.background[y * 16 + x]);\r\n\r\n                    if (pixel.color.a > 0)\r\n                        this.app.stage.addChild(pixel.graphic);\r\n\r\n                    pixel.update = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mouse.button.state) {\r\n            let pos = mouse.getPosition();\r\n            let x = Math.floor(pos.x / this.scale),\r\n                y = Math.floor(pos.y / this.scale);\r\n\r\n            if (x >= 0 && x < 16 && y >= 0 && y < 16) {\r\n                if (mouse.button.id === 0)\r\n                    this.setPixel(x, y, this.currentColor);\r\n                else if (mouse.button.id === 2)\r\n                    this.setPixel(x, y, { r: 0, g: 0, b: 0, a: 0 });\r\n\r\n                this.getPixel(x, y).update = true;\r\n            }\r\n            if (!mouse.inBounds)\r\n                mouse.button.state = false;\r\n        }\r\n\r\n        this.refresh = false;\r\n    }\r\n\r\n    decToHex(c) {\r\n        var hex = Number(c).toString(16);\r\n        return hex.length === 1 ? `0${hex}` : hex;\r\n    }\r\n\r\n    clear() {\r\n        console.log('Clearing...')\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                this.setPixel(x, y, { r: 0, g: 0, b: 0, a: 0 });\r\n                this.getPixel(x, y).update = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    rgbToHex(r, g, b) {\r\n        return Number(`0x${this.decToHex(r)}${this.decToHex(g)}${this.decToHex(b)}`);\r\n    }\r\n\r\n    getPixel(x, y) {\r\n        return !this.pixels[x] ? null : !this.pixels[x][y] ? null : this.pixels[x][y];\r\n    }\r\n\r\n    setPixel(x, y, color) {\r\n        if (!this.pixels[x] || !this.pixels[x][y]) {\r\n            this.pixels[x][y] = {\r\n                color,\r\n                graphic: new this.Graphics(),\r\n                update: false\r\n            }\r\n        }\r\n\r\n        let pixel = this.getPixel(x, y);\r\n\r\n        pixel.graphic = new this.Graphics();\r\n\r\n        if (this.showGrid)\r\n            pixel.graphic.lineStyle(1, 0x000000, 1);\r\n\r\n        pixel.graphic.beginFill(this.rgbToHex(color.r, color.g, color.b));\r\n        pixel.graphic.drawRect(0, 0, this.scale, this.scale);\r\n        pixel.graphic.endFill();\r\n\r\n        pixel.graphic.alpha = color.a / 255;\r\n\r\n        pixel.graphic.x = x * this.scale;\r\n        pixel.graphic.y = y * this.scale;\r\n    }\r\n\r\n    compose = () => {\r\n        const canvas = document.createElement('canvas'), context = canvas.getContext('2d');\r\n        canvas.width = 16;\r\n        canvas.height = 16;\r\n\r\n        let imgData = context.createImageData(16, 16);\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                let v = (y * 16 + x) * 4\r\n                imgData.data[v] = this.pixels[x][y].color.r;\r\n                imgData.data[v + 1] = this.pixels[x][y].color.g;\r\n                imgData.data[v + 2] = this.pixels[x][y].color.b;\r\n                imgData.data[v + 3] = this.pixels[x][y].color.a;\r\n            }\r\n        }\r\n\r\n        context.putImageData(imgData, 0, 0);\r\n\r\n        const url = canvas.toDataURL('image/png');\r\n        let link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', 'texture.png');\r\n        link.click();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {PIXI.Application} app \r\n     */\r\n    constructor(app) {\r\n        this.app = app;\r\n\r\n        this.width = app.view.width;\r\n        this.height = app.view.height;\r\n        this.scale = this.width / 16;\r\n\r\n        this.pixels = [];\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            this.pixels[x] = [];\r\n            for (let y = 0; y < 16; y++) {\r\n                this.background[y * 16 + x] = new this.Graphics();\r\n                this.background[y * 16 + x].beginFill((x % 2 === 0 && y % 2 === 1) || (x % 2 === 1 && y % 2 === 0) ? 0xFFFFFF : 0xDDDDDD);\r\n                this.background[y * 16 + x].drawRect(0, 0, this.scale, this.scale);\r\n                this.background[y * 16 + x].endFill();\r\n\r\n                this.background[y * 16 + x].x = x * this.scale;\r\n                this.background[y * 16 + x].y = y * this.scale;\r\n\r\n                this.setPixel(x, y, { r: 255 * x / 15, g: 0, b: 255 * y / 15, a: Math.floor((255 * x / 15 + 255 * y / 15) / 2) });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Editor\r\n}","import React from 'react';\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport * as editor from '../app/texture-editor/editor';\r\nimport mouse from '../app/texture-editor/common/Mouse';\r\n\r\nimport '../styles/texture-editor.css';\r\n\r\nlet mouseMove_timeout = null;\r\n\r\nclass TextureEditor extends React.Component {\r\n    app;\r\n\r\n    canvas;\r\n\r\n    doBoundUpdate = true;\r\n\r\n    /**\r\n     * @type {editor.Editor}\r\n     */\r\n    editor;\r\n\r\n    getCanvas = () => {\r\n        let parent = document.getElementById('texture_editor_wrapper');\r\n\r\n        let scale = parent.getBoundingClientRect().width - 200;\r\n\r\n        this.app = new PIXI.Application({\r\n            width: scale,\r\n            height: scale\r\n        });\r\n\r\n        this.editor = new editor.Editor(this.app);\r\n\r\n        this.app.view.oncontextmenu = (e) => { e.preventDefault(); e.stopPropagation(); }\r\n        this.app.view.id = \"editor\";\r\n\r\n        this.canvas = this.editor.startup();\r\n\r\n\r\n        parent.appendChild(this.canvas);\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getCanvas();\r\n        this.editor.updateBounds();\r\n\r\n        this.canvas.addEventListener('mousemove', (event) => {\r\n            mouse.position.old = {\r\n                x: Math.floor(mouse.position.x),\r\n                y: Math.floor(mouse.position.y)\r\n            };\r\n\r\n            mouse.position.x = Math.floor(event.clientX - this.editor.bounds.left);\r\n            mouse.position.y = Math.floor(event.clientY - this.editor.bounds.top);\r\n\r\n            mouse.moving = true;\r\n\r\n            if (mouseMove_timeout)\r\n                clearTimeout(mouseMove_timeout);\r\n\r\n            mouseMove_timeout = setTimeout(() => {\r\n                mouse.position.old = {\r\n                    x: Math.floor(mouse.position.x),\r\n                    y: Math.floor(mouse.position.y)\r\n                };\r\n                mouse.moving = false;\r\n            }, 30);\r\n        });\r\n\r\n        this.canvas.addEventListener('mousedown', (event) => {\r\n            mouse.button.state = true;\r\n            mouse.button.id = event.button;\r\n        });\r\n\r\n        this.canvas.addEventListener('mouseup', () => {\r\n            mouse.button.state = false;\r\n            mouse.button.id = null;\r\n        });\r\n\r\n        this.canvas.addEventListener('mouseleave', () => mouse.inBounds = false);\r\n\r\n        this.canvas.addEventListener('mouseenter', () => mouse.inBounds = true);\r\n\r\n        this.canvas.addEventListener('click', () => mouse.clicked = true);\r\n\r\n        window.addEventListener('resize', () => {\r\n            this.editor.updateBounds();\r\n        });\r\n    }\r\n\r\n    updateColor(event) {\r\n        if (event.target.value > 255)\r\n            event.target.value = 255;\r\n\r\n        let m = event.target.name.match(/rgb_([rgba])/)[1];\r\n        this.editor.currentColor[m] = event.target.value === '' ? 0 : event.target.value;\r\n    }\r\n\r\n    colorPicker = () => {\r\n        let list = ['r', 'g', 'b', 'a'];\r\n\r\n        return (\r\n            <div className='color-picker-container'>\r\n                {list.map(v => (\r\n                    <div key={`rgb_${v}_div`} className='rgb-input-container'>\r\n                        <label htmlFor={`rgb_${v}`} className='rgb-input-label'>{v}</label>\r\n                        <input key={v} name={`rgb_${v}`} type='text' className='rgb-input-field' placeholder='0' onChange={this.updateColor} onKeyPress={(event) => {\r\n                            if (!event.key.match(/[0-9]/))\r\n                                event.preventDefault();\r\n                        }} defaultValue={v === 'a' ? 255 : 0}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <div className='texture-editor-container' id='texture_editor_container'>\r\n                    <div className='texture-editor-wrapper' id='texture_editor_wrapper'></div>\r\n                    <this.colorPicker />\r\n                    <div className='texture-editor-controls'>\r\n                        <button onClick={() => {\r\n                            this.editor.showGrid = !this.editor.showGrid;\r\n                            this.editor.refresh = true;\r\n                        }}>Toggle Grid</button>\r\n                        <button onClick={() => this.editor.clear()}>Clear</button>\r\n                    </div>\r\n\r\n                    <button onClick={() => this.editor.compose()}>Download</button>\r\n                </div>\r\n                <label id='debug_check_label' htmlFor='debug-check'>Debug</label>\r\n                <input name='debug-check' type='checkbox' onChange={(event) => {\r\n                    this.editor.debug = event.target.checked;\r\n                }}></input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.updateColor = this.updateColor.bind(this);\r\n    }\r\n}\r\n\r\nexport { TextureEditor }","import './styles/App.css';\n\nimport { ConfigForm } from './components/ConfigGUI';\nimport { NavBar } from './components/NavBar';\nimport { TextureEditor } from './components/TextureEditor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header><NavBar /></header>\n      <main>\n        <TextureEditor />\n        {/* <ConfigForm /> */}\n        <div id='debug'></div>\n      </main>\n      <footer>\n        <div>Built by ChrisOfNormandy.</div>\n        <div>Join <a href='https://discord.gg/EW5JsGJfdt'>Discord</a></div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}